import { IReportItem } from "@services/types/processes";
import { FC } from "react";
import { MainViewBody, MainViewContainer, MainViewHeader, SubContainer, SubContainerHeader, Table, Td, Th } from "./BaseTags";
import styled from "styled-components";


interface IExploitView{
    exploit: IReportItem
}
export const ExploitView: FC<IExploitView> = ({exploit}) => {
    if(!exploit || !exploit.info.length){
        return(<></>)
    }
    return (
        <MainViewContainer>
            <MainViewHeader> Блок: Эксплуатация </MainViewHeader>
            <MainViewBody>
                {
                    exploit.info.map( ex => {
                        return (
                            <ViewExploitInfo item={ex}/>
                        )
                    })
                }
                {/* <ViewExploitInfo item={
                    {
                        name: "Weak Password",
                        result: {
                            host: '192.168.250.157',
                            port: '22',

                            messages: [
                                {
                                    payload: '123user:123user',
                                    message: 'Permission denied (Invalid Password).'
                                },
                                {
                                    payload: 'root:root',
                                    message: 'Permission denied (Invalid Password).'
                                },
                                {
                                    payload: 'root123:root123',
                                    message: 'Permission denied (Invalid Password).'
                                },
                                {
                                    payload: 'admin:admin',
                                    message: 'Permission denied (Invalid Password).'
                                },
                                {
                                    payload: 'user123:user123',
                                    message: 'Success connection'
                                }
                            ],
                            listing: [
                                {
                                    command: "ls -la",
                                    result: [
                                        "total 28",
                                        "drwxr-x--- 4 user123 user123 4096 Dec 20 21:42 .",
                                        "drwxr-xr-x 3 root    root    4096 Dec 20 21:41 ..",
                                        "-rw-r--r-- 1 user123 user123  220 Jan  6  2022 .bash_logout",
                                        "-rw-r--r-- 1 user123 user123 3771 Jan  6  2022 .bashrc",
                                        "drwx------ 2 user123 user123 4096 Dec 20 21:42 .cache",
                                        "-rw-r--r-- 1 user123 user123  807 Jan  6  2022 .profile",
                                        "drwx------ 2 user123 user123 4096 Dec 20 21:41 .ssh",
                                        "-rw-r--r-- 1 user123 user123    0 Dec 20 21:42 .sudo_as_admin_successful"

                                    ]
                                }
                            ]
                        }
                    }
                } /> */}
            </MainViewBody>
        </MainViewContainer>
    )
}

const ViewExploitInfo: FC<{item: any}> = ({item}) => {
    return (
        <SubContainer>
            <SubContainerHeader>
                <CveName>{item.name.toUpperCase()}</CveName>
                <HostName>{`${item.result.host}:${item.result.port}`}</HostName>
            </SubContainerHeader>
            <Table>
                <thead>
                    <tr>
                        <Th>#</Th>
                        <Th>Полезная нагрузка</Th>
                        <Th>Результат</Th>
                    </tr>
                </thead>
                <tbody>
                    {
                        item.result.messages && item.result.messages.length ? 
                        item.result.messages.map( (m,index) => {
                            return (
                                <tr>
                                    <Td> {index+1} </Td>
                                    <Td> {m?.payload || m?.command} </Td>
                                    <Td> {m.message} </Td>
                                </tr>
                            )
                        } )
                        :null
                    }
                    {
                        item.result?.listing && item.result.listing.length ?
                        item.result.listing.map( (l, index) => {
                            return (
                                <tr>
                                    <Td> 
                                        { 
                                            item.result.messages && item.result.messages.length ? 
                                                item.result.messages.length + index +1 : 
                                                index+1 
                                        } 
                                    </Td>
                                    <Td> {l.command} </Td>
                                    <Td>
                                        {
                                            l.result.map( r => <div>{r}</div> )
                                        }
                                    </Td>
                                </tr>
                            )
                        } )
                        :null
                    }
                </tbody>
            </Table>
        </SubContainer>
    )
}

const CveName = styled.div`
    
`

const HostName = styled.div`
    
`